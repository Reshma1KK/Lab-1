{"ast":null,"code":"function base64ArrayBuffer(arrayBuffer) {\n  var base64 = '';\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  var bytes = new Uint8Array(arrayBuffer);\n  var byteLength = bytes.byteLength;\n  var byteRemainder = byteLength % 3;\n  var mainLength = byteLength - byteRemainder;\n  var a, b, c, d;\n  var chunk; // Main loop deals with bytes in chunks of 3\n\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2]; // Use bitmasks to extract 6-bit segments from the triplet\n\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n\n    d = chunk & 63; // 63       = 2^6 - 1\n    // Convert the raw binary segments to the appropriate ASCII encoding\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  } // Deal with the remaining bytes and padding\n\n\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength];\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n    // Set the 4 least significant bits to zero\n\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + '==';\n  } else if (byteRemainder == 2) {\n    chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n    // Set the 2 least significant bits to zero\n\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n  }\n\n  return base64;\n}\n\nexport default base64;","map":{"version":3,"sources":["/Users/reshmakrishnakumar/Desktop/FALL_2021/CMPE-273/Assignments/Lab1/Frontend/ubereats/src/components/LandingPage/base64.js"],"names":["base64ArrayBuffer","arrayBuffer","base64","encodings","bytes","Uint8Array","byteLength","byteRemainder","mainLength","a","b","c","d","chunk","i"],"mappings":"AAAA,SAASA,iBAAT,CAA2BC,WAA3B,EAAwC;AACtC,MAAIC,MAAM,GAAM,EAAhB;AACA,MAAIC,SAAS,GAAG,kEAAhB;AAEA,MAAIC,KAAK,GAAW,IAAIC,UAAJ,CAAeJ,WAAf,CAApB;AACA,MAAIK,UAAU,GAAMF,KAAK,CAACE,UAA1B;AACA,MAAIC,aAAa,GAAGD,UAAU,GAAG,CAAjC;AACA,MAAIE,UAAU,GAAMF,UAAU,GAAGC,aAAjC;AAEA,MAAIE,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb;AACA,MAAIC,KAAJ,CAVsC,CAYtC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgCM,CAAC,GAAGA,CAAC,GAAG,CAAxC,EAA2C;AACzC;AACAD,IAAAA,KAAK,GAAIT,KAAK,CAACU,CAAD,CAAL,IAAY,EAAb,GAAoBV,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,IAAgB,CAApC,GAAyCV,KAAK,CAACU,CAAC,GAAG,CAAL,CAAtD,CAFyC,CAIzC;;AACAL,IAAAA,CAAC,GAAG,CAACI,KAAK,GAAG,QAAT,KAAsB,EAA1B,CALyC,CAKZ;;AAC7BH,IAAAA,CAAC,GAAG,CAACG,KAAK,GAAG,MAAT,KAAsB,EAA1B,CANyC,CAMZ;;AAC7BF,IAAAA,CAAC,GAAG,CAACE,KAAK,GAAG,IAAT,KAAuB,CAA3B,CAPyC,CAOZ;;AAC7BD,IAAAA,CAAC,GAAGC,KAAK,GAAG,EAAZ,CARyC,CAQZ;AAE7B;;AACAX,IAAAA,MAAM,IAAIC,SAAS,CAACM,CAAD,CAAT,GAAeN,SAAS,CAACO,CAAD,CAAxB,GAA8BP,SAAS,CAACQ,CAAD,CAAvC,GAA6CR,SAAS,CAACS,CAAD,CAAhE;AACD,GAzBqC,CA2BtC;;;AACA,MAAIL,aAAa,IAAI,CAArB,EAAwB;AACtBM,IAAAA,KAAK,GAAGT,KAAK,CAACI,UAAD,CAAb;AAEAC,IAAAA,CAAC,GAAG,CAACI,KAAK,GAAG,GAAT,KAAiB,CAArB,CAHsB,CAGC;AAEvB;;AACAH,IAAAA,CAAC,GAAG,CAACG,KAAK,GAAG,CAAT,KAAiB,CAArB,CANsB,CAMC;;AAEvBX,IAAAA,MAAM,IAAIC,SAAS,CAACM,CAAD,CAAT,GAAeN,SAAS,CAACO,CAAD,CAAxB,GAA8B,IAAxC;AACD,GATD,MASO,IAAIH,aAAa,IAAI,CAArB,EAAwB;AAC7BM,IAAAA,KAAK,GAAIT,KAAK,CAACI,UAAD,CAAL,IAAqB,CAAtB,GAA2BJ,KAAK,CAACI,UAAU,GAAG,CAAd,CAAxC;AAEAC,IAAAA,CAAC,GAAG,CAACI,KAAK,GAAG,KAAT,KAAmB,EAAvB,CAH6B,CAGH;;AAC1BH,IAAAA,CAAC,GAAG,CAACG,KAAK,GAAG,IAAT,KAAoB,CAAxB,CAJ6B,CAIH;AAE1B;;AACAF,IAAAA,CAAC,GAAG,CAACE,KAAK,GAAG,EAAT,KAAoB,CAAxB,CAP6B,CAOH;;AAE1BX,IAAAA,MAAM,IAAIC,SAAS,CAACM,CAAD,CAAT,GAAeN,SAAS,CAACO,CAAD,CAAxB,GAA8BP,SAAS,CAACQ,CAAD,CAAvC,GAA6C,GAAvD;AACD;;AAED,SAAOT,MAAP;AACD;;AAED,eAAeA,MAAf","sourcesContent":["function base64ArrayBuffer(arrayBuffer) {\n  var base64    = ''\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n  var bytes         = new Uint8Array(arrayBuffer)\n  var byteLength    = bytes.byteLength\n  var byteRemainder = byteLength % 3\n  var mainLength    = byteLength - byteRemainder\n\n  var a, b, c, d\n  var chunk\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6\n    d = chunk & 63               // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength]\n\n    a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3)   << 4 // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + '=='\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n\n    a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15)    <<  2 // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + '='\n  }\n\n  return base64\n}\n\nexport default base64;\n"]},"metadata":{},"sourceType":"module"}